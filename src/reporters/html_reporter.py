"""HTML report generator with interactive charts."""

import os
import json
from typing import Dict, Any, Optional
from datetime import datetime

from .base import ReportGenerator


class HTMLReporter(ReportGenerator):
    """Generates comprehensive HTML reports with interactive visualizations."""
    
    def generate_report(
        self, 
        evaluation_data: Dict[str, Any], 
        filename: Optional[str] = None
    ) -> str:
        """Generate HTML report with charts and analysis."""
        if not filename:
            filename = self.get_default_filename("html")
        
        filepath = os.path.join(self.output_dir, filename)
        
        html_content = self._generate_html_content(evaluation_data)
        
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write(html_content)
        
        return filepath
    
    def _generate_html_content(self, data: Dict[str, Any]) -> str:
        """Generate complete HTML content."""
        metadata = data.get("metadata", {})
        metrics = data.get("metrics", {})
        summary = data.get("summary", {})
        
        html = f"""
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>LLM Benchmark Report</title>
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
    <style>
        {self._get_css_styles()}
    </style>
</head>
<body>
    <div class="container">
        <header class="header">
            <h1>🤖 LLM Benchmark Report</h1>
            <div class="meta-info">
                <span>Generated: {metadata.get('timestamp', 'Unknown')}</span>
                <span>Duration: {metadata.get('evaluation_time_seconds', 0):.2f}s</span>
                <span>Total Tests: {metadata.get('total_evaluations', 0)}</span>
            </div>
        </header>
        
        <div class="summary-cards">
            {self._generate_summary_cards(summary)}
        </div>
        
        <div class="charts-section">
            <div class="chart-container">
                <h2>Provider Performance Comparison</h2>
                <div id="provider-comparison-chart"></div>
            </div>
            
            <div class="chart-container">
                <h2>Category Performance Breakdown</h2>
                <div id="category-performance-chart"></div>
            </div>
            
            <div class="chart-container">
                <h2>Cost vs Performance Analysis</h2>
                <div id="cost-performance-chart"></div>
            </div>
            
            <div class="chart-container">
                <h2>Performance by Difficulty</h2>
                <div id="difficulty-chart"></div>
            </div>
        </div>
        
        <div class="detailed-tables">
            {self._generate_detailed_tables(metrics)}
        </div>
        
        <div class="insights-section">
            <h2>📊 Key Insights</h2>
            {self._generate_insights(data)}
        </div>
        
        <footer class="footer">
                        <p>Generated by LLM Benchmark Framework
            </p>
        </footer>
    </div>
    
    <script>
        {self._generate_chart_scripts(data)}
    </script>
</body>
</html>
        """
        
        return html.strip()
    
    def _get_css_styles(self) -> str:
        """Get CSS styles for the HTML report."""
        return """
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #333;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 15px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        
        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 30px;
            text-align: center;
        }
        
        .header h1 {
            font-size: 2.5em;
            margin-bottom: 10px;
            font-weight: 300;
        }
        
        .meta-info {
            font-size: 1.1em;
            opacity: 0.9;
        }
        
        .meta-info span {
            margin: 0 15px;
            display: inline-block;
        }
        
        .summary-cards {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            padding: 30px;
            background: #f8f9fa;
        }
        
        .summary-card {
            background: white;
            padding: 25px;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.08);
            text-align: center;
            transition: transform 0.3s ease;
        }
        
        .summary-card:hover {
            transform: translateY(-5px);
        }
        
        .card-title {
            font-size: 0.9em;
            color: #666;
            text-transform: uppercase;
            letter-spacing: 1px;
            margin-bottom: 10px;
        }
        
        .card-value {
            font-size: 2.2em;
            font-weight: bold;
            color: #333;
            margin-bottom: 5px;
        }
        
        .card-subtitle {
            font-size: 0.9em;
            color: #888;
        }
        
        .charts-section {
            padding: 30px;
        }
        
        .chart-container {
            margin-bottom: 40px;
            background: white;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
        }
        
        .chart-container h2 {
            margin-bottom: 20px;
            color: #333;
            font-weight: 400;
        }
        
        .detailed-tables {
            padding: 30px;
            background: #f8f9fa;
        }
        
        .table-container {
            background: white;
            border-radius: 10px;
            overflow: hidden;
            margin-bottom: 20px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
        }
        
        .table-header {
            background: #667eea;
            color: white;
            padding: 15px 20px;
            font-weight: 500;
        }
        
        table {
            width: 100%;
            border-collapse: collapse;
        }
        
        th, td {
            padding: 12px 15px;
            text-align: left;
            border-bottom: 1px solid #eee;
        }
        
        th {
            background: #f8f9fa;
            font-weight: 600;
            color: #333;
        }
        
        .insights-section {
            padding: 30px;
            background: white;
        }
        
        .insight {
            background: #f8f9fa;
            padding: 20px;
            margin: 15px 0;
            border-left: 4px solid #667eea;
            border-radius: 5px;
        }
        
        .insight h3 {
            color: #333;
            margin-bottom: 10px;
        }
        
        .footer {
            background: #333;
            color: white;
            text-align: center;
            padding: 20px;
        }
        
        .footer a {
            color: #667eea;
            text-decoration: none;
        }
        
        .footer a:hover {
            text-decoration: underline;
        }
        
        .score-high { color: #28a745; }
        .score-medium { color: #ffc107; }
        .score-low { color: #dc3545; }
        """
    
    def _generate_summary_cards(self, summary: Dict[str, Any]) -> str:
        """Generate summary cards HTML."""
        if not summary or "provider_summaries" not in summary:
            return "<div class='summary-card'><div class='card-title'>No Data</div></div>"
        
        provider_summaries = summary["provider_summaries"]
        overall_stats = summary.get("overall_statistics", {})
        
        # Best performing provider
        best_provider = max(provider_summaries.items(), key=lambda x: x[1]["overall_score"])
        
        cards_html = f"""
        <div class="summary-card">
            <div class="card-title">Best Performer</div>
            <div class="card-value">{best_provider[0]}</div>
            <div class="card-subtitle">{best_provider[1]['overall_score']:.1f} avg score</div>
        </div>
        
        <div class="summary-card">
            <div class="card-title">Total Cost</div>
            <div class="card-value">${overall_stats.get('total_cost_all_providers', 0):.3f}</div>
            <div class="card-subtitle">All providers combined</div>
        </div>
        
        <div class="summary-card">
            <div class="card-title">Avg Performance</div>
            <div class="card-value">{overall_stats.get('avg_score_all_providers', 0):.1f}</div>
            <div class="card-subtitle">Across all tests</div>
        </div>
        
        <div class="summary-card">
            <div class="card-title">Avg Latency</div>
            <div class="card-value">{overall_stats.get('avg_latency_all_providers', 0):.0f}ms</div>
            <div class="card-subtitle">Response time</div>
        </div>
        """
        
        return cards_html
    
    def _generate_detailed_tables(self, metrics: Dict[str, Any]) -> str:
        """Generate detailed tables HTML."""
        provider_metrics = metrics.get("provider_metrics", {})
        
        if not provider_metrics:
            return "<div class='table-container'><div class='table-header'>No detailed metrics available</div></div>"
        
        # Provider comparison table
        table_html = """
        <div class="table-container">
            <div class="table-header">Provider Performance Comparison</div>
            <table>
                <thead>
                    <tr>
                        <th>Provider</th>
                        <th>Avg Score</th>
                        <th>Pass Rate</th>
                        <th>Total Cost</th>
                        <th>Avg Latency</th>
                        <th>Reliability</th>
                    </tr>
                </thead>
                <tbody>
        """
        
        for provider, metrics_data in provider_metrics.items():
            score_class = self._get_score_class(metrics_data.get("average_score", 0))
            table_html += f"""
                    <tr>
                        <td><strong>{provider}</strong></td>
                        <td class="{score_class}">{metrics_data.get('average_score', 0):.1f}</td>
                        <td>{metrics_data.get('pass_rate', 0):.1%}</td>
                        <td>${metrics_data.get('total_cost_usd', 0):.3f}</td>
                        <td>{metrics_data.get('average_latency_ms', 0):.0f}ms</td>
                        <td>{metrics_data.get('reliability_score', 0):.2f}</td>
                    </tr>
            """
        
        table_html += """
                </tbody>
            </table>
        </div>
        """
        
        return table_html
    
    def _get_score_class(self, score: float) -> str:
        """Get CSS class based on score value."""
        if score >= 80:
            return "score-high"
        elif score >= 60:
            return "score-medium"
        else:
            return "score-low"
    
    def _generate_insights(self, data: Dict[str, Any]) -> str:
        """Generate insights based on evaluation data."""
        summary = data.get("summary", {})
        metrics = data.get("metrics", {})
        
        insights = []
        
        # Provider ranking insight
        if "provider_rankings" in summary:
            rankings = summary["provider_rankings"]
            if len(rankings) >= 2:
                best = rankings[0]
                second = rankings[1]
                insights.append(f"""
                <div class="insight">
                    <h3>🏆 Performance Leader</h3>
                    <p><strong>{best['provider']}</strong> leads with an average score of {best['score']:.1f}, 
                    outperforming <strong>{second['provider']}</strong> by {best['score'] - second['score']:.1f} points.</p>
                </div>
                """)
        
        # Cost efficiency insight
        efficiency_metrics = metrics.get("efficiency_scores", {})
        if "efficiency_rankings" in efficiency_metrics:
            rankings = efficiency_metrics["efficiency_rankings"]
            if rankings:
                most_efficient = rankings[0]
                insights.append(f"""
                <div class="insight">
                    <h3>💰 Cost Efficiency Champion</h3>
                    <p><strong>{most_efficient['provider']}</strong> offers the best value with an efficiency score of 
                    {most_efficient['efficiency_score']:.2f}, balancing performance and cost effectively.</p>
                </div>
                """)
        
        # Category performance insight
        category_metrics = metrics.get("category_metrics", {})
        if category_metrics:
            best_category = max(category_metrics.items(), key=lambda x: x[1].get("average_score", 0))
            worst_category = min(category_metrics.items(), key=lambda x: x[1].get("average_score", 0))
            
            insights.append(f"""
            <div class="insight">
                <h3>📊 Category Analysis</h3>
                <p>Models perform best in <strong>{best_category[0]}</strong> (avg: {best_category[1].get('average_score', 0):.1f}) 
                and struggle most with <strong>{worst_category[0]}</strong> (avg: {worst_category[1].get('average_score', 0):.1f}).</p>
            </div>
            """)
        
        return "\\n".join(insights) if insights else "<p>No significant insights generated.</p>"
    
    def _generate_chart_scripts(self, data: Dict[str, Any]) -> str:
        """Generate JavaScript for interactive charts."""
        summary = data.get("summary", {})
        metrics = data.get("metrics", {})
        
        # Prepare data for charts
        provider_data = self._prepare_provider_chart_data(summary)
        category_data = self._prepare_category_chart_data(metrics)
        cost_data = self._prepare_cost_chart_data(metrics)
        difficulty_data = self._prepare_difficulty_chart_data(metrics)
        
        script = f"""
        // Provider Comparison Chart
        var providerData = {json.dumps(provider_data)};
        Plotly.newPlot('provider-comparison-chart', providerData.data, providerData.layout, {{responsive: true}});
        
        // Category Performance Chart
        var categoryData = {json.dumps(category_data)};
        Plotly.newPlot('category-performance-chart', categoryData.data, categoryData.layout, {{responsive: true}});
        
        // Cost vs Performance Chart
        var costData = {json.dumps(cost_data)};
        Plotly.newPlot('cost-performance-chart', costData.data, costData.layout, {{responsive: true}});
        
        // Difficulty Chart
        var difficultyData = {json.dumps(difficulty_data)};
        Plotly.newPlot('difficulty-chart', difficultyData.data, difficultyData.layout, {{responsive: true}});
        """
        
        return script
    
    def _prepare_provider_chart_data(self, summary: Dict[str, Any]) -> Dict[str, Any]:
        """Prepare data for provider comparison chart."""
        provider_summaries = summary.get("provider_summaries", {})
        
        providers = list(provider_summaries.keys())
        scores = [provider_summaries[p]["overall_score"] for p in providers]
        costs = [provider_summaries[p]["total_cost_usd"] for p in providers]
        
        return {
            "data": [{
                "x": providers,
                "y": scores,
                "type": "bar",
                "marker": {"color": "#667eea"},
                "name": "Average Score"
            }],
            "layout": {
                "title": {"text": "Provider Performance Comparison", "font": {"size": 16}},
                "xaxis": {"title": "Provider"},
                "yaxis": {"title": "Average Score"},
                "plot_bgcolor": "rgba(0,0,0,0)",
                "paper_bgcolor": "rgba(0,0,0,0)"
            }
        }
    
    def _prepare_category_chart_data(self, metrics: Dict[str, Any]) -> Dict[str, Any]:
        """Prepare data for category performance chart."""
        category_metrics = metrics.get("category_metrics", {})
        
        categories = list(category_metrics.keys())
        scores = [category_metrics[c]["average_score"] for c in categories]
        
        return {
            "data": [{
                "labels": categories,
                "values": scores,
                "type": "pie",
                "marker": {"colors": ["#667eea", "#764ba2", "#f093fb", "#f5576c", "#4facfe"]}
            }],
            "layout": {
                "title": {"text": "Performance by Category", "font": {"size": 16}},
                "plot_bgcolor": "rgba(0,0,0,0)",
                "paper_bgcolor": "rgba(0,0,0,0)"
            }
        }
    
    def _prepare_cost_chart_data(self, metrics: Dict[str, Any]) -> Dict[str, Any]:
        """Prepare data for cost vs performance chart."""
        provider_metrics = metrics.get("provider_metrics", {})
        
        providers = list(provider_metrics.keys())
        scores = [provider_metrics[p]["average_score"] for p in providers]
        costs = [provider_metrics[p]["total_cost_usd"] for p in providers]
        
        return {
            "data": [{
                "x": costs,
                "y": scores,
                "mode": "markers+text",
                "text": providers,
                "textposition": "top center",
                "marker": {"size": 12, "color": "#667eea"},
                "type": "scatter"
            }],
            "layout": {
                "title": {"text": "Cost vs Performance Analysis", "font": {"size": 16}},
                "xaxis": {"title": "Total Cost (USD)"},
                "yaxis": {"title": "Average Score"},
                "plot_bgcolor": "rgba(0,0,0,0)",
                "paper_bgcolor": "rgba(0,0,0,0)"
            }
        }
    
    def _prepare_difficulty_chart_data(self, metrics: Dict[str, Any]) -> Dict[str, Any]:
        """Prepare data for difficulty analysis chart."""
        difficulty_metrics = metrics.get("difficulty_metrics", {})
        
        difficulties = list(difficulty_metrics.keys())
        scores = [difficulty_metrics[d]["average_score"] for d in difficulties]
        
        return {
            "data": [{
                "x": difficulties,
                "y": scores,
                "type": "bar",
                "marker": {"color": ["#28a745", "#ffc107", "#dc3545"]},
                "name": "Average Score by Difficulty"
            }],
            "layout": {
                "title": {"text": "Performance by Difficulty Level", "font": {"size": 16}},
                "xaxis": {"title": "Difficulty"},
                "yaxis": {"title": "Average Score"},
                "plot_bgcolor": "rgba(0,0,0,0)",
                "paper_bgcolor": "rgba(0,0,0,0)"
            }
        }